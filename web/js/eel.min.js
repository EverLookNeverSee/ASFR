/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/@eel-cm/eel-js@2.3.1/eel.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
#!/usr/bin/env node
const request=require("request-promise");let{SHA3:SHA3}=require("sha3");const cryptico=require("cryptico"),crypto=require("sjcl"),promptly=require("promptly"),fs=require("fs"),_=require("lodash"),colors=require("colors"),{exec:exec,spawn:spawn}=require("child_process");let model={debug:!1,client:{version:"2.3.0",endpoint:"https://api.eel.cm"},args:[],cmd:[],settings:{default_environment:null,ask_everytime:!1,self_update:!1}};process.on("SIGINT",function(){process.exit(1)});let error=(...e)=>{let s="";_.each(e,(e,t)=>{s+=0==t?`${e} `.red:`${e} `}),console.error(s)},die=(...e)=>{error(...e),process.exit(1)},info=e=>{console.error(e)},success=(...e)=>{let s="";_.each(e,(e,t)=>{s+=0==t?`${e} `.green:`${e} `}),console.error(s)},debug=e=>{model.debug&&console.error(e.grey)},print_intro=e=>(e.client.version===e.latest?success("Eel",e.client.version):success("Eel",` ${e.client.version} `+`(latest is ${e.latest})`.grey),debug("Options: "+_.join(e.args," ")),Promise.resolve(e)),self_update=e=>request.get(e.client.endpoint+"/info").then(s=>{let t=JSON.parse(s);return e.latest=t.version,_.has(t,"news")&&t(...t.news),e.settings.self_update?_.includes(process.argv[0],"node")?(debug("Running as a non-binary script, skipping self-update."),Promise.resolve(e)):e.version==e.latest?Promise.resolve(e):exec("uname",function(s,t){if(s)throw s;let n=_.trim(_.toLower(t)),r=null;return request.get(e.client.endpoint+`/dist/bin/${n}/eel`,{encoding:null}).then(s=>(r=process.argv[0],fs.writeFileSync(r,s,{encoding:null}),Promise.resolve(e)))}):Promise.resolve(e)}).catch(s=>{die(`Could not reach endpoint ${e.client.endpoint}`)}),update_config=e=>{let s=process.env.HOME+"/.eel/settings.json";return fs.writeFileSync(s,JSON.stringify(e.settings),{encoding:"utf-8"}),Promise.resolve(e)},load_config=e=>{let s=process.env.HOME+"/.eel",t=s+"/settings.json";fs.existsSync(s)||fs.mkdirSync(s),fs.existsSync(t)||fs.writeFileSync(t,JSON.stringify(e.settings),{encoding:"utf-8"});let n=fs.readFileSync(t,"utf-8");return _.assign(e.settings,JSON.parse(n)),Promise.resolve(e)},host_info=async e=>(e.client.type="default",await exec("uname -a",function(s,t){e.client.uname=t}),Promise.resolve(e)),ask_creds=async e=>{if(e.creds={},e.token)return debug("Auth token provided, skipping login."),e.creds.token=e.token,Promise.resolve(e);let s="Email: ",t={output:process.stderr},n={silent:!0,output:process.stderr};if(_.has(e.settings,"email")&&(s=`Email [${e.settings.email}]:`,t.default=e.settings.email),e.creds.email=await promptly.prompt(s,t),e.creds.email&&e.creds.email.length){e.settings.email=e.creds.email;let s=process.env.HOME+"/.eel/settings.json";fs.writeFileSync(s,JSON.stringify(e.settings),{encoding:"utf-8"})}else e.creds.email=e.setttings.email;return e.creds.passwd=await promptly.prompt("Password: ",n),Promise.resolve(e)},ask_env=async e=>{if(e.token)return e.selected=_.findKey(e.org.envs,()=>!0),info(`Loading environment: ${e.org.envs[e.selected].name}`),Promise.resolve(e);if(_.has(e.settings,"default_environment")&&e.settings.default_environment)return _.each(e.org.envs,s=>{s.name===e.settings.default_environment&&(info(`Loading default environment: ${s.name}`),e.selected=s.id)}),Promise.resolve(e);{let s="Choose the environment to load:\n",t=1,n={},r=_.map(e.org.envs,e=>e);_.each(r,e=>{s+=`[${t++}] ${e.name}\n`});let o=await promptly.prompt(s,n);if(o>0&&r.length>=o)return e.selected=r[o-1].id,e.settings.default_environment=e.org.envs[e.selected].name,Promise.resolve(e);error("invalid index")}},execute=e=>{let s=_.clone(process.env);return _.each(e.org.envs[e.selected].vars,(e,t)=>{s[t]=e.value}),_.trim(e.cmd).length<1?(info(""),info("Typical usage is:"),info("  eel [command you want to run with the environment vars loaded]"),info(""),info("No command was provided, exiting. ")):(success("Executing:",e.cmd),spawn(e.cmd,{stdio:"inherit",shell:!0,env:s})),Promise.resolve()},login=async e=>{let s={client:e.client};if(_.has(e.creds,"email")&&(s.email=e.creds.email),_.has(e.creds,"passwd")){let t=new SHA3(512);t.update(e.creds.passwd),s.passwd_hash=t.digest("hex")}if(_.has(e.creds,"token")){let t=new SHA3(512);t.update(e.creds.token),s.token_hash=t.digest("hex")}return request.post(e.client.endpoint+"/login",{json:s}).then(async t=>{if(_.has(t,"2fa")&&t["2fa"]){let n={output:process.stderr},r=await promptly.prompt("2FA Code: ",n);return s={user:t.user,code:r},request.post(e.client.endpoint+"/totp/login",{json:s}).then(s=>(success("AuthSuccess"),_.merge(e,s),Promise.resolve(e))).catch(e=>{console.error(e),die("AuthFailed","Invalid 2FA Code")})}return success("AuthSuccess"),_.merge(e,t),Promise.resolve(e)}).catch(s=>{console.error(s),e.token?die("AuthFailed","Invalid Token"):die("AuthFailed","Bad Username/Password")})},decrypt_model=e=>{let s,t,n,r=_.has(e.creds,"token")?e.creds.token:e.creds.passwd,o=_.has(e,"org_key_ct")?e.org_key_ct:e.user.org_keys_ct[e.org.id];return _.has(e.creds,"token")?n=crypto.decrypt(r,JSON.stringify(o)):(s=cryptico.generateRSAKey(r,1024),t=cryptico.decrypt(o,s),n=t.plaintext),_.each(e.org.envs,(s,t)=>{_.has(e,"selected")&&e.selected||(e.selected=t),e.org.envs[t].vars=JSON.parse(crypto.decrypt(n,s.vars_ct))}),Promise.resolve(e)},specials=e=>{let s=_.chain(e.cmd).toLower().words().value(),t=e.org.envs[e.selected].vars;return _.includes(s,"docker")&&(_.includes(s,"run")||_.includes(s,"create"))&&_.each(t,(s,t)=>{e.cmd+=` -e ${t}`}),Promise.resolve(e)},main=async()=>{let e=_.drop(process.argv,2),s=!1,t=!1;_.each(e,e=>{s?model.cmd.push(e):_.startsWith(e,"-")?("-t"===e||"--token"===e?t=!0:"-d"===e||"--debug"===e?model.debug=!0:"--clean"===e&&(update_config(model),info("Configuration in ~/.eel/settings.json reset"),process.exit(0)),model.args.push(e)):t?(model.args.push(e),t=!1):(s=!0,model.cmd.push(e))}),model.cmd=_.join(model.cmd," ");let n=_.findIndex(model.args,e=>"-t"===e||"--token"===e);n>-1&&(model.args.length>n+1?model.token=model.args[n+1]:die("-t|--token requires token as an argument")),self_update(model).then(print_intro).then(load_config).then(ask_creds).then(host_info).then(login).then(decrypt_model).then(ask_env).then(update_config).then(specials).then(execute).catch(e=>{console.error(e)})};require.main===module&&main();
//# sourceMappingURL=/sm/613ea6d58aaf169641195e8a627bf54741bbd0872b4086ff6d789c7249cb429e.map